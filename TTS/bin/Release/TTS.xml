<?xml version="1.0"?>
<doc>
<assembly>
<name>
TTS
</name>
</assembly>
<members>
<member name="T:TTS.My.Resources.Resources">
<summary>
  Eine stark typisierte Ressourcenklasse zum Suchen von lokalisierten Zeichenfolgen usw.
</summary>
</member>
<member name="P:TTS.My.Resources.Resources.ResourceManager">
<summary>
  Gibt die zwischengespeicherte ResourceManager-Instanz zurück, die von dieser Klasse verwendet wird.
</summary>
</member>
<member name="P:TTS.My.Resources.Resources.Culture">
<summary>
  Überschreibt die CurrentUICulture-Eigenschaft des aktuellen Threads für alle
  Ressourcenzuordnungen, die diese stark typisierte Ressourcenklasse verwenden.
</summary>
</member>
<member name="P:TTS.My.Resources.Resources.encrypt">
<summary>
  Sucht eine lokalisierte Ressource vom Typ System.Drawing.Icon ähnlich wie (Symbol).
</summary>
</member>
<member name="P:TTS.My.Resources.Resources.status_encrypted">
<summary>
  Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
</summary>
</member>
<member name="M:TTS.ClsCurve25519.Clamp(System.Byte[]@)">
 <summary>
 Private key clamping
 </summary>
 <param name="AgreementKey">[in] 32 random bytes, [out] your private key for key agreement</param>
</member>
<member name="M:TTS.ClsCurve25519.KeyGen(System.Byte[]@,System.Byte[]@,System.Byte[]@)">
 <summary>
 Key-Pair generation * WARNING: if s is not NULL, this function has data-dependent timing 
 </summary>
 <param name="PublicKey">[out] your public key</param>
 <param name="SignKey">[out] your private key for signing</param>
 <param name="AgreementKey">[in] 32 random bytes, [out] your private key for key agreement</param>
</member>
<member name="M:TTS.ClsCurve25519.GetSharedSecret(System.Byte[]@,System.Byte[],System.Byte[])">
 <summary>
 Key agreement
 </summary>
 <param name="SharedSecret">[out] shared secret (needs hashing before use)</param>
 <param name="AgreementKey">[in]  your private key for key agreement</param>
 <param name="PublicKey">[in] peer's public key</param>
</member>
<member name="T:TTS.ClsCurve25519.Long10">
 <summary>
 Using this class instead of long[10] to avoid bounds checks. 
 </summary>
</member>
<member name="M:TTS.ClsCurve25519.Copy32(System.Byte[]@,System.Byte[])">
 <summary>
 Copies 32 Bytes from Input to Output
 </summary>
 <param name="Output">[out] Copy of Input</param>
 <param name="Input">[in] Input to Copy to Output</param>
</member>
<member name="M:TTS.EC_KCDSA.Sign(System.Byte[],System.Byte[],System.Byte[])">
 <summary>
 Signature generation primitive, calculates (x-h)s mod q
 </summary>
 <param name="SignHash">signature hash (of message, signature pub key, and context data)</param>
 <param name="SignPrivKey">signature private key</param>
 <param name="PrivKey">private key for signing</param>
 <returns>signature value</returns>
</member>
<member name="M:TTS.EC_KCDSA.Verify(System.Byte[],System.Byte[],System.Byte[])">
 <summary>
 Signature verification primitive, calculates Y = vP + hG
 </summary>
 <param name="SignValue">signature value</param>
 <param name="SignHash">signature hash</param>
 <param name="PublicKey">public key</param>
 <returns>signature public key</returns>
</member>
<member name="M:TTS.ModCrypto.GetMasterKeys(System.String)">
 <summary>
 Generates the Masterkeys from PassPhrase 0=PublicKey; 1=SignKey; 2=AgreementKey
 </summary>
 <returns>List of Masterkeys</returns>
</member>
<member name="M:TTS.ModCrypto.Keygen(System.Byte[])">
 <summary>
 Generates the Masterkeys from KeyHash
 </summary>
 <param name="KeyHash">The 32 Byte hashed PassPhrase</param>
 <returns>Array of Masterkeys</returns>
</member>
<member name="M:TTS.ModCrypto.GenerateSignature(System.String,System.String)">
 <summary>
 Generates the Signature of the MessageHEX
 </summary>
 <param name="MessageHEX">Message as HEX String</param>
 <param name="PrivateKeyHEX">The Private Key to Sign with</param>
 <returns>Signature in HEX String</returns>
</member>
<member name="M:TTS.ModCrypto.VerifySignature(System.String,System.String,System.String)">
 <summary>
 Verify the Signature of the UnsignedMessageHEX String
 </summary>
 <param name="SignatureHEX">The Signature as HEX String</param>
 <param name="UnsignedMessageHEX">The Unsigned Message as HEX String</param>
 <param name="PublicKeyHEX">The Public Key as HEX String</param>
 <returns></returns>
</member>
</members>
</doc>
